{"repository_name":"Representer","body":"# Exercism Crystal Representer\n\nThe Docker image to automatically create a representation for Crystal solutions submitted to [Exercism].\n\n## Run the representer\n\nTo create a representation for an arbitrary exercise, do the following:\n\n1. Open a terminal in the project's root\n2. Run `./bin/run.sh <exercise-slug> <solution-dir> <output-dir>`\n\nOnce the representer has finished, its results will be written to `<output-dir>/representation.txt` and `<output-dir>/mapping.json`.\n\n## Run the representer on an exercise using Docker\n\n_This script is provided for testing purposes, as it mimics how representers run in Exercism's production environment._\n\nTo create a representation for an using the Docker image, do the following:\n\n1. Open a terminal in the project's root\n2. Run `./bin/run-in-docker.sh <exercise-slug> <solution-dir> <output-dir>`\n\nOnce the representer has finished, its results will be written to `<output-dir>/representation.txt` and `<output-dir>/mapping.json`.\n\n## Run the tests\n\nTo run the tests to verify the behavior of the representer, do the following:\n\n1. Open a terminal in the project's root\n2. Run `./bin/run-tests.sh`\n\nThese are [golden tests][golden] that compare the `representation.txt` and `mapping.json` generated by running the current state of the code against the \"known good\" `tests/<test-name>/representation.txt` and `tests/<test-name>/mapping.json`. All files created during the test run itself are discarded.\n\nWhen you've made modifications to the code that will result in a new \"golden\" state, you'll need to generate and commit a new `tests/<test-name>/representation.txt` and `tests/<test-name>/mapping.json` file.\n\n## Run the tests using Docker\n\n_This script is provided for testing purposes, as it mimics how representers run in Exercism's production environment._\n\nTo run the tests to verify the behavior of the representer using the Docker image, do the following:\n\n1. Open a terminal in the project's root\n2. Run `./bin/run-tests-in-docker.sh`\n\nThese are [golden tests][golden] that compare the `representation.txt` and `mapping.json` generated by running the current state of the code against the \"known good\" `tests/<test-name>/representation.txt` and `tests/<test-name>/mapping.json`. All files created during the test run itself are discarded.\n\nWhen you've made modifications to the code that will result in a new \"golden\" state, you'll need to generate and commit a new `tests/<test-name>/representation.txt` and `tests/<test-name>/mapping.json` file.\n\n[representers]: https://github.com/exercism/docs/tree/main/building/tooling/representers\n[golden]: https://ro-che.info/articles/2017-12-04-golden-tests\n[exercism]: https://exercism.io\n","program":{"html_id":"Representer/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"Representer","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"Representer/Representer","path":"Representer.html","kind":"class","full_name":"Representer","name":"Representer","abstract":false,"superclass":{"html_id":"Representer/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Representer/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Representer/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/api.cr","line_number":14,"url":null}],"repository_name":"Representer","program":false,"enum":false,"alias":false,"const":false,"doc":"Representer allows to be integrated with other programs easilly through its API.\n\n```\nrepresent = Representer.new\nrepresent.parse_string(\"def foo\\n  1 + 1\\nend\")\nrepresent.represent\nrepresent.representation\n# => \"def PLACEHOLDER_1\\n  1 + 1\\nend\"\n```","summary":"<p>Representer allows to be integrated with other programs easilly through its API.</p>","instance_methods":[{"html_id":"ast:Crystal::ASTNode-instance-method","name":"ast","abstract":false,"location":{"filename":"src/api.cr","line_number":19,"url":null},"def":{"name":"ast","return_type":"Crystal::ASTNode","visibility":"Public","body":"@ast"}},{"html_id":"debug_json:String-instance-method","name":"debug_json","doc":"Returns a json formatted `String` with the debug information.\n\n```\nrepresent = Representer.new\nrepresent.parse_string(\"def foo\\n  1 + 1\\nend\")\nrepresent.represent\nrepresent.debug_json\n# => \"[[\"PLACEHOLDER_1\", \"Crystal::Def\"]]\"","summary":"<p>Returns a json formatted <code>String</code> with the debug information.</p>","abstract":false,"location":{"filename":"src/api.cr","line_number":135,"url":null},"def":{"name":"debug_json","return_type":"String","visibility":"Public","body":"TestVisitor.debug.to_json"}},{"html_id":"mapping_json:String-instance-method","name":"mapping_json","doc":"Returns a mapping of the replaced names to the original names.\nThe format returned is a json formatted `String`.\n\n```\nrepresent = Representer.new\nrepresent.parse_string(\"def foo\\n  1 + 1\\nend\")\nrepresent.represent\nrepresent.mapping\n# => \"{\\\"PLACEHOLDER_1\\\":\\\"foo\\\"}\"","summary":"<p>Returns a mapping of the replaced names to the original names.</p>","abstract":false,"location":{"filename":"src/api.cr","line_number":105,"url":null},"def":{"name":"mapping_json","return_type":"String","visibility":"Public","body":"json = Hash(String, String).new\nTestVisitor.data.each_with_index do |x, i|\n  json[\"PLACEHOLDER_#{i + 1}\"] = x\nend\njson.to_json\n"}},{"html_id":"parse_file(file:Path)-instance-method","name":"parse_file","doc":"Parses a single file by reading it and then parsing it with the Crystal\nparser.\n\n```\npath = Path.new(\"path/to/file\")\nrepresent = Representer.new\nrepresent.parse_file(path)\n```","summary":"<p>Parses a single file by reading it and then parsing it with the Crystal parser.</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"Path"}],"args_string":"(file : Path)","args_html":"(file : Path)","location":{"filename":"src/api.cr","line_number":68,"url":null},"def":{"name":"parse_file","args":[{"name":"file","external_name":"file","restriction":"Path"}],"visibility":"Public","body":"if File.exists?(file)\nelse\n  raise(\"Can't find #{file}\")\nend\n@solution = File.read(file)\n@ast = parse(@solution)\n"}},{"html_id":"parse_folder(folder:Path,files:Array(String))-instance-method","name":"parse_folder","doc":"Parses specified files in a folder by grouping them into a single long `String`\nand then parsing that `String` with the Crystal parser.\n\n```\npath = Path.new(\"path/to/folder\")\nrepresent = Representer.new\nrepresent.parse_folder(path, [\"main.cr\"])\n```","summary":"<p>Parses specified files in a folder by grouping them into a single long <code>String</code> and then parsing that <code>String</code> with the Crystal parser.</p>","abstract":false,"args":[{"name":"folder","external_name":"folder","restriction":"Path"},{"name":"files","external_name":"files","restriction":"Array(String)"}],"args_string":"(folder : Path, files : Array(String))","args_html":"(folder : Path, files : Array(String))","location":{"filename":"src/api.cr","line_number":46,"url":null},"def":{"name":"parse_folder","args":[{"name":"folder","external_name":"folder","restriction":"Path"},{"name":"files","external_name":"files","restriction":"Array(String)"}],"visibility":"Public","body":"if Dir.exists?(folder)\nelse\n  raise(\"Can't find #{folder}\")\nend\n@solution = \"\"\nfiles.each do |file|\n  if File.exists?(folder / file)\n    p(folder / file)\n    @solution = @solution + (File.read(folder / file))\n  else\n    raise(\"Cant find files\")\n  end\nend\n@ast = parse(@solution)\n"}},{"html_id":"parse_folder(folder:Path)-instance-method","name":"parse_folder","doc":"Parses all files in a folder by grouping them into a single long `String`\nand then parsing that `String` with the Crystal parser.\n\n```\npath = Path.new(\"path/to/folder\")\nrepresent = Representer.new\nrepresent.parse_folder(path)\n```","summary":"<p>Parses all files in a folder by grouping them into a single long <code>String</code> and then parsing that <code>String</code> with the Crystal parser.</p>","abstract":false,"args":[{"name":"folder","external_name":"folder","restriction":"Path"}],"args_string":"(folder : Path)","args_html":"(folder : Path)","location":{"filename":"src/api.cr","line_number":29,"url":null},"def":{"name":"parse_folder","args":[{"name":"folder","external_name":"folder","restriction":"Path"}],"visibility":"Public","body":"if Dir.exists?(folder)\nelse\n  raise(\"Can't find #{folder}\")\nend\n@solution = \"\"\n(Dir.open(folder)).each_child do |file|\n  @solution = @solution + (File.read(folder / file))\nend\n@ast = parse(@solution)\n"}},{"html_id":"parse_string(content:String)-instance-method","name":"parse_string","doc":"Parses a `String` by parsing it with the Crystal parser.\n\n```\nrepresent = Representer.new\nrepresent.parse_string(\"def foo\\n  1 + 1\\nend\")\n```","summary":"<p>Parses a <code>String</code> by parsing it with the Crystal parser.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String)","args_html":"(content : String)","location":{"filename":"src/api.cr","line_number":80,"url":null},"def":{"name":"parse_string","args":[{"name":"content","external_name":"content","restriction":"String"}],"visibility":"Public","body":"@ast = parse(content)"}},{"html_id":"represent-instance-method","name":"represent","doc":"Transforms the AST into a representation.","summary":"<p>Transforms the AST into a representation.</p>","abstract":false,"location":{"filename":"src/api.cr","line_number":85,"url":null},"def":{"name":"represent","visibility":"Public","body":"if @representation.empty?\n  visitor = TestVisitor_2.new\n  visitor.accept(@ast)\n  transformed_ast = @ast.transform(Reformat.new(visitor.methods))\n  visitor_2 = TestVisitor_2.new\n  visitor_2.accept(ast)\n  @representation = (@ast.transform(TestVisitor.new(visitor_2.counter, visitor_2.debug))).to_s\nend"}},{"html_id":"representation:String-instance-method","name":"representation","abstract":false,"location":{"filename":"src/api.cr","line_number":19,"url":null},"def":{"name":"representation","return_type":"String","visibility":"Public","body":"@representation"}},{"html_id":"representation_json:String-instance-method","name":"representation_json","doc":"Returns a version number for the representation format.\nThe format returned is a json formatted `String`.\n\n```\nrepresent = Representer.new\nrepresent.parse_string(\"def foo\\n  1 + 1\\nend\")\nrepresent.represent\nrepresent.representation_json\n# => \"{\\\"version\\\":1}\"","summary":"<p>Returns a version number for the representation format.</p>","abstract":false,"location":{"filename":"src/api.cr","line_number":123,"url":null},"def":{"name":"representation_json","return_type":"String","visibility":"Public","body":"{\"version\" => 1}.to_json"}}]}]}}